\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage{algpseudocode}
\usepackage{mismath}
\usepackage{algorithm}
\usepackage[spanish]{babel}
\usepackage[letterpaper,top=2cm,bottom=2cm,left=3cm,right=3cm,marginparwidth=1.75cm]{geometry}
\usepackage{amsmath}
\usepackage{longtable}
\usepackage{array}
\usepackage{alphabeta} 
\linespread{1.06}
\setlength{\parskip}{8pt plus2pt minus2pt}
\newcommand{\eat}[1]{}
\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

\usepackage[official]{eurosym}
\usepackage{enumitem}
\setlist{nolistsep,noitemsep}
\usepackage[hidelinks]{hyperref}
\usepackage{cite}
\usepackage{lipsum}




\begin{document}

\begin{titlepage}
\begin{center}

% Top 
%\includegraphics[width=0.25\textwidth]{Univalle}~\\[1mm]


% Title
\HRule \\[0.4cm]
{ \LARGE 
  \textbf{Fundamentos de Analisis y Diseño de Algoritmos}\\[0.4cm]
  \emph{Mini-Proyecto}\\[0.4cm]
}
\HRule \\[1.5cm]



% Author
{ \large
  \textbf{Integrantes:} \\[0.1cm]
  KAROL MARIANA MAYORQUIN HERRERA - 1860682 3743\\[0.1cm]
  JENIFFER GUARIN ARISTIZABAL - 1860661 3743\\[0.1cm]
  EDINSON ORLANDO DORADO DORADO - 1941966 3743\\[0.1cm]
  SANTIAGO RAMIREZ OSPINA - 1841391 3743\\[0.1cm]
} 
\vfill
{ \large
    \textbf{Profesor:} \\[0.1cm]
    JESUS ALEXANDER ARANDA BUENO
}

\vfill

%\textsc{\Large Cyprus University of Technology}\\[0.4cm]
\textsc{\large Facultad de Ingeniería\\Escuela de Ingeniería de Sistemas \& Computación}\\[0.4cm]


% Bottom
{\large Marzo 22, 2022}
 
\end{center}
\end{titlepage}































%Fin de la portada
\section{Resumen y estructura del informe}
Lo primero que se presenta en el informe es el pseudocódigo que busca entre todas las posibilidades, una solucion óptima, este algoritmo es recursivo, y usa fuerza bruta, o una técnica ciega. Este algoritmo será de utilidad al hacer el análisis de los 2 algoritmos siguientes. Un algoritmo que usa una tecnica voraz, y que al compararlo con el primer algoritmo vamos a poder ver cual es la relación de soluciones óptimas que encuentra el algorimto voraz comparado con el algoritmo que usa fuerza bruta. El último algoritmo que se muestra y analiza usa la técnica de programación dinámica, que en teoria, (en teoria debido a que esto se va a probar en el análisis de dicho algoritmo), encuentra la mejor solución al problema, al igual que el primer algoritmo, pero de una forma mucho más eficiente. \newpage
















%Fin resumen
\section{Solución usando fuerza bruta}
Una forma segura de encontrar la solucion óptima para algún problema, es procesar todas las soluciones. La forma que utliza el algoritmo mostrado abajo es comparar en cada llamado recursivo los dos caminos posibles que esa instancia del problema tiene. Esto lo hace, por supuesto, llamandose a si mismo con esas dos instancias, ambas, mas pequeñas que el problema orignial. Esto se hace hasta que se llega a un estado trivial, que es cuando el problema queda de un solo elemento en el array a y b (así mismo el array ab y ba quedan vacios).\newline

Como para solucionar cada instancia del problema, se crean dos mas, el numero de operaciones que se deben hacer son \textbf{$2^n$} aproximadamente. Lo cual tiene una complejidad \textbf{O($2^n$)}.\newline

En adición, como para este algoritmo se tiene que especificar desde cual linea (a o b) empezar, se tiene que utilizar dos veces, uno para 'a' y mirar si se empeieza por 'a', o si empezando con 'b' se obtiene una mejor solución.

Cabe recordar, que el objetivo con este primer algoritmo es solamente con fines de apoyar el análisis de los dos algormitmos siguientes.\newline



\begin{algorithmic}[1]
\Procedure{algoritmoCiego}{$n, a, b, ab, ba, counter, lineas, lineaActual$}
    \If{$(n == 1)$}
        \If{(lineaActual ==$ 'a'$)}
            \State \textbf{return} counter + a[len(a) - n], lineas + [a[len(a) - n]]
        \Else
            \State \textbf{return} counter + b[len(b) - n], lineas + [b[len(b) - n]]
        \EndIf
    \Else
        \If{(lineaActual ==$ 'a'$)}
            \State \textbf{return} 
            \newline  min(\newline algoritmoCiego(n-1, a, b, ab, ba, counter + a[len(a) - n], lineas +[$'a:'$ + str(a[len(a) - n]) ],$'a'$) ,
            \newline  algoritmoCiego(n-1, a, b, ab, ba, counter + $ab$[len(ab)-n+1] + a[len(a) - n],lineas+[$'a:'$ +str(a[len(a) - n])]+[$'cab:'$ +str($ab$[len(ab)-n+1])],$'b'$))
        \Else
            \State \textbf{return} 
            \newline min(\newline algoritmoCiego(n-1, a, b, ab, ba, counter + $ba$[len(ba)-n+1] + b[len(b) - n],lineas+[$'b:'$ +str(b[len(b) - n])]+[$'cba:'$ +str($ba$[len(ba)-n+1])],"a"), 
            \newline  algoritmoCiego(n-1, a, b, ab, ba, counter  + b[len(b) - n], lineas + [$'b:'$ +str(b[len(b) - n])],$'b'$))
        \EndIf
    \EndIf
\EndProcedure
\State{\newpage}
\Procedure{procesarSalidaAlgoritmoCiego}{$n,a,b,ab,ba$}
        \State{llamadoAlgoritmoSiDebeIniciarEnA = None}
        \State{llamadoAlgoritmoSiDebeIniciarEnB = None}
    \If{$(n > 0)$}
        \State{llamadoAlgoritmoSiDebeIniciarEnA = algoritmoCiego(n, a, b, ab, ba,0,[], $'a'$)}
        \State{llamadoAlgoritmoSiDebeIniciarEnB = algoritmoCiego(n, a, b, ab, ba,0,[],$'b'$)}
    \Else 
        \State \textbf{raise} 'error , n no puede ser 0'
    \EndIf
    \If{(llamadoAlgoritmoSiDebeIniciarEnA[0]  $<$ llamadoAlgoritmoSiDebeIniciarEnB[0])}
        \State \textbf{return} [n,llamadoAlgoritmoSiDebeIniciarEnA[0],llamadoAlgoritmoSiDebeIniciarEnA[1]]
    \EndIf
    \State \textbf{return} [n, llamadoAlgoritmoSiDebeIniciarEnB[0],llamadoAlgoritmoSiDebeIniciarEnB[1]] 

\EndProcedure
\end{algorithmic}\newpage

\includegraphics[width=0.9\textwidth]{graficos1y2.jpg}~\\[1mm]
\newpage
\includegraphics[width=0.9\textwidth]{graficos3y4.jpg}~\\[1mm]
\newpage
\includegraphics[width=0.9\textwidth]{graficos5y6.jpg}~\\[1mm]\newpage


%Fin Solucion por fuerza bruta



\section{Solución usando Programación Dinámica}
\subsection{Descripción de la idea}
Se hará uso de las tablas hash para indicar cada punto de ensamblaje con su respectiva posición y contenido. La llave estará conformada por: el carril (línea a ó línea b) y  la ubicación (posición del punto de ensamblaje). El contenido estará dado por: líneas (camino más óptimo que hay hasta un punto de ensamblaje) y counter (almacena el tiempo total del camino más óptimo que hay hasta un punto de ensamblaje). \newline

Se crea la función principal con los atributos: lineaInicial (indica en que linea se inicia la actividad 1), hash (tabla hash), a (linea a), b (linea b), ab (cambios de $"a"$ a $"b"$), ba (cambios de $"b"$ a $"a"$). Además se crea la variable estacion que indicará la posición del punto de ensamblaje que se está analizando, la cual se irá iterando dependiendo de los n puntos de ensamblaje. Se harán dos condiciones principales cuando(estación = 0) y cuando(estación $>$ 0). 
\newline
En la condición (estación = 0) se determina donde empieza la actividad 1; si (lineaInicial = a), se añade a la tabla hash $"b"$ en la posición 0 con infinito ($\infty$) y si (lineaInicial = b), se añade a la tabla hash $"a"$ en la posición 0 con infinito ($\infty$). 
\newline
En la segunda condición (estación $>$ 0), se crea la variable estacionDeAtras que será igual a estacion-1 y permitirá "mirar hacia atrás" e ir comparando en cada posición el menor valor que hay entre a y b. Para escoger el camino óptimo y guardarlo en la tabla hash se tiene en cuenta el valor del punto de ensamblaje siguiente en a y b, como también el valor de cada cambio (ab o ba).
\newline
En un primer if se analiza los posibles caminos optimos que hay si se toma los puntos de emsablaje que hay en $"a"$, entonces ubicados en un punto de ensamblaje en a miramos hacia atrás y comparamos el punto que esta justo antes del que se está analizando, si es menor que la suma del punto en $"b"$ de la estacionDeAtras y el cambio ba, si es asi, en la tabla hash se almacena la linea $"a"$ y el valor que tiene el punto de ensamblaje que está justo antes del punto que se está analizando en a.
\newline
En el segundo if de igual manera se analiza los posibles caminos optimos que hay si se toma los puntos de emsablaje que hay en $"b"$. Ubicados en un punto de ensamblaje en $"b"$ miramos hacia atrás y comparamos si tal punto es menor que la suma del punto en $"a"$ de la estacionDeAtras y el cambio ab, si es asi, en la tabla hash se almacena la linea $"b"$ y el valor que tiene el punto de ensamblaje que está justo antes del punto que se está analizando.
\newline
Por último se crea una función que permitirá procesar la información de la función principal, es decir que se encargue de completar y procesar la tabla hash con la respectiva información del camino y tiempo óptimo.

\includegraphics[width=\textwidth,height=25cm]{etapas1y2.jpg}~\\[1mm]\includegraphics[width=\textwidth,height=25cm]{etapas3y4.jpg}~\\[1mm]

\subsection{Pseudocódigo}


\begin{algorithmic}[1]
\Procedure{crearLlave}{$carril, ubicacion$}
        \State \textbf{return} $(carril, ubicacion)$
\EndProcedure




\Procedure{crearContenido}{$lineas, counter$}
        \State \textbf{return} $[lineas, counter]$
\EndProcedure




\Procedure{recorrerLineasProduccion}{$lineaInicial,hash, a, b, ab, ba$}
    \For{$i$ $in$ $lenght(a)$}
        \State{estacion = i}
        \If{$(estacion ==$ 0)}
            \If{$(lineaInicial ==$ $'a')$}
                \State {hash[crearLlave($'a'$, 0)] = crearContenido([$'a'$+": "+str($a$[estacion])], $a$[estacion])}
                \State {hash[crearLlave($'b'$, 0)] = crearContenido([$'b'$+": "+str($b$[estacion])], math.inf)}
            \EndIf
            \If{$(lineaInicial ==$ $'b')$}
                \State {hash[crearLlave($'b'$, 0)] = crearContenido([$'b'$+": "+str(b[estacion])],$b$[estacion])}
                \State {hash[crearLlave($'a'$, 0)] = crearContenido([$'a'$+": "+str($a$[estacion])], math.inf)}
            \EndIf
        \ElsIf {$(estacion >$ 0)}
            \State{estacionDeAtras = estacion - 1}
                \If{$(hash[($'a'$,estacionDeAtras)][1] < hash[($'b'$,estacionDeAtras)][1] +             $ba$[estacionDeAtras])$}
                    \State {hash[crearLlave($'a'$,estacion)] = crearContenido(hash[($'a'$,estacionDeAtras)][0]+[$'a'$+": "+str(a[estacion])], hash[($'a'$, estacionDeAtras)][1]+ $a$[estacion])}
                    \Else 
                        \State {hash[crearLlave($'a'$,estacion)] = crearContenido(hash[($'b'$,estacionDeAtras)][0]+[$'cab'$+": "+str(ba[estacionDeAtras])]+[$'a'$+": "+str(a[estacion])], hash[($'b'$, estacionDeAtras)][1]+$ba$[estacionDeAtras] + a[estacion])}
                \EndIf
                \If{$(hash[($'b'$,estacionDeAtras)][1] < hash[($'a'$,estacionDeAtras)][1] + $ab$[estacionDeAtras])$}
                    \State {hash[crearLlave($'b'$,estacion)] = crearContenido(hash[($'b'$,estacionDeAtras)][0]+[$'b'$+": "+str($b$[estacion])], hash[($'b'$, estacionDeAtras)][1]+$b$[estacion])}
                \Else 
                    \State {hash[crearLlave($'b'$,estacion)] = crearContenido(hash[($'a'$,estacionDeAtras)][0]+[$'cab'$+": "+str($ab$[estacionDeAtras])]+[$'b'$+": "+str($b$[estacion])], hash[($'a'$, estacionDeAtras)][1]+$ab$[estacionDeAtras] + $b$[estacion])}
                \EndIf
        \EndIf
    \EndFor
\EndProcedure
\State{\newpage}
\Procedure{procesarLineasProduccion}{$n, a, b, ab, ba$}
        \State hash =  $\{ \}$
        \If{$(n > 0)$}
            \If{$(a[0] > b[0])$}
                \State {recorrerLineasProduccion($'b'$, hash, a, b, ab, ba)}
            \Else 
                \State {recorrerLineasProduccion($'a'$, hash, a, b, ab, ba)}
            \EndIf
            \State {lineaSiTerminaEnA, counterSiTerminaEnA = hash[($'a'$,n-1)]}
            \State {lineaSiTerminaEnB, counterSiTerminaEnB = hash[($'b'$,n-1)]}
        \If{$(counterSiTerminaEnA < counterSiTerminaEnB)$}
            \State \textbf{return} $[n, counterSiTerminaEnA, lineaSiTerminaEnA]$
            \State \textbf{return} $[n, counterSiTerminaEnB, lineaSiTerminaEnB]$
        \EndIf
        \EndIf
\EndProcedure
\end{algorithmic}\newpage 

\subsection{Análisis de complejidad}
Al analizar el algoritmo anterior, se observa que se hace uso de un for el cual se itera n veces, es decir, que depende de los n puntos de ensamblaje que hay en las lineas de producción y además de eso, en cada iteración se hacen dos operaciones principales, se procesa la enésina estación en la linea de producción $"a"$ y de la misma forma para la linea $"b"$. En estas operaciones principales, en resumen se miran los dos caminos posibles que se tienen para llegar a esa estacion: si se llega a esa estacion siguiento la linea de produccion directamente, o si se llega a esa estacion cambiando de linea. La decision se toma dependiendo de cual decision tiene menor costo, y por ende, necesita menos tiempo, minizando la cantidad de tiempo necesitado para llegar al final de las lineas de producción.

Por tal análisis, teniendo en cuenta que en cada iteracion del ciclo for, se hace un numero constante de operaciones, se tiene que la complejidad del algoritmo es lineal, siendo exactos de la longitud del array a o del array b.

Cabe destacar que en este algoritmo aunque se logra una complejidad lineal, requiere mas espacio en memoria, para guardar lo que se ha procesado en las estaciones anteriores de cada estacion, permitiendo ahorrar el número de operaciones que se hacen. 

Por ultimo se hace la aceveración de que buscar una llave en el set (o hash), es de complejidad O(1). 

Las funciones auxiliares usadas por la funcion recorrerLineasProduccion: CREARLLAVE Y CREARCONTENIDO, se puede asegurar que su complejidad de O(1), debido a que lo que hacen es retornar una tupla con los argumentos y un array con los argumentos respectivamente.

La ultima función auxiliar tiene una complejidad O(n), debido a que llama la funcion que recorre y procesa cada estacion a y b en cada linea de ensamblaje, y la complejidad de esta es O(1).

Siendo la complejidad total de los 4 algoritmos que dan una solucion optima al problema de lineas de ensamblajes, usando programación dinámica (la complejidad es lineal, no se procesan todos los posibles subproblemas, y se guarda la información de lo procesado anteriormente para ahorrar el numero de operaciones a procesar) es de O(n).\newpage

\subsection{Detalles principales de la implementación}
Características del hardware: 
\newline
Comando utilizado para el Procesador: cat /proc/cpuinfo
\newline
Procesador AMD EPYC 7B12
\newline
Inoformación del plan de Replit:
\newline
Memoria RAM: 500 Mb
\newline
Inoformación del plan de Replit:
\newline
Disco sólido: 500 Mb

Características del software:
\newline
Comando utilizado el Software: cat /etc/os-release
\newline
Software Ubuntu
\newline
Replit Python

Aspectos propios de las estructuras de datos usadas y conceptos propios de la implementación de los algoritmos:
\newline
Una estructura de datos utilizada fue dict (diccionario), la cual nos permitió almacenar como keys la linea de producción y la posición o ubicación de los n puntos de ensamblaje y como values, el contenido del camino óptimo (lineas utilizadas) y el tiempo total, es decir el menor valor que retorna dicho camino.
\newline

Es importante recordar la complejidad en el caso promedio que tiene realizar cada operación en la estructura de datos diccionario:
-Copy e iteration es O(n)
\newline
-In, get, set y delete de un objeto es O(1)\newpage


\subsection{Descripción y análisis de las pruebas realizadas}
En las pruebas que se realizaron analizamos que el tiempo de ejecución no cambia mucho en entradas con la misma cantidad de puntos de ensamblaje (n) independientemente de los valores que tome hacer cada actividad, se ve diferencia en el tiempo cuando n se hace cada vez más grande.\newline

\centering
\begin{tabular}{ |p{5cm}||p{3cm}|p{3cm}|p{3cm}|  }

 \hline
 \multicolumn{4}{|c|}{Tests 1} \\
 \hline
 
 Entradas & P. voraz & P. dinamica & Agloritmo Ciego\\

 \hline
 7   & 0.000469446 & 0.000061750 &  0.001425027\\
 1 2 6 1 5 9 1 & n & 18 & 18\\
 3 1 3 2 8 1 9 l& l[  ]&l['a: 2', 'cab: 1', 'b: 1', 'b: 3', 'cba: 1', 'a: 1', 'a: 5', 'a: 3', 'a: 1']&['a: 1', 'cab: 1', 'b: 1', 'b: 3', 'b: 2', 'b: 8', 'b: 1', 'cba: 1', 'a: 1']\\
 1 1 1 3 5 2 & & &\\
 4 2 1 3 2 1 & & &\\
 \hline
 9   & 0.001000165 & 0.000123500 &  0.006434679\\
 5 2 3 4 6 2 7 8 2  & & 27 & 27\\
 1 2 5 4 9 2 4 1 2 &  & ['b: 1', 'b: 2', 'cba: 1', 'a: 3', 'a: 4', 'a: 6', 'a: 2', 'cab: 1', 'b: 4', 'b: 1', 'b: 2'] &['b: 1', 'b: 2', 'cba: 1', 'a: 3', 'a: 4', 'a: 6', 'a: 2', 'cab: 1', 'b: 4', 'b: 1', 'b: 2']\\
 3 2 1 1 5 1 2 1 & & &\\
 1 1 5 2 4 3 2 1 & & &\\
  \hline
 12   & 0.000998735 & 0.000149965 &  0.041909217\\
 2 5 9 6 3 2 5 4 1 2 1 3 & & 35 & 35\\
 1 5 3 6 4 2 1 5 2 2 1 4 & & ['b: 1', 'b: 5', 'b: 3', 'b: 6', 'b: 4', 'b: 2', 'b: 1', 'b: 5', 'cba: 1', 'a: 1', 'a: 2', 'a: 1', 'a: 3'] & ['b: 1', 'b: 5', 'b: 3', 'b: 6', 'b: 4', 'b: 2', 'b: 1', 'b: 5', 'cba: 1', 'a: 1', 'a: 2', 'a: 1', 'a: 3']\\
 1 1 2 1 3 1 4 2 1 3 2 & & &\\
 2 3 1 1 4 2 5 1 2 1 3 & & &\\
 \hline
 15   & 0.000999212 & 0.000149250 &  0.628857851\\
 1 2 5 4 3 6 5 2 1 2 1 2 8 9 3 & & 44 & 44\\
 2 5 8 7 6 3 4 2 5 4 5 8 2 1 5 & & ['a: 1', 'a: 2', 'a: 5', 'a: 4', 'a: 3', 'a: 6', 'a: 5', 'a: 2', 'a: 1', 'a: 2', 'a: 1', 'a: 2', 'cab: 2', 'b: 2', 'b: 1', 'b: 5'] & ['a: 1', 'a: 2', 'a: 5', 'a: 4', 'a: 3', 'a: 6', 'a: 5', 'a: 2', 'a: 1', 'a: 2', 'a: 1', 'a: 2', 'cab: 2', 'b: 2', 'b: 1', 'b: 5']\\
 1 1 1 2 5 4 3 2 6 2 1 2 3 1 & & &\\
 2 2 1 3 6 5 1 2 1 1 2 4 7 2 & & &\\
 \hline
 11   & 0.000999689 & 0.000116825 &  0.072787761\\
 1 2 5 3 4 2 3 1 6 5 2 & & 26 & 26\\
 1 3 2 5 4 7 3 8 2 1 2 & & ['b: 1', 'b: 3', 'b: 2', 'cba: 1', 'a: 3', 'a: 4', 'a: 2', 'a: 3', 'a: 1', 'cab: 1', 'b: 2', 'b: 1', 'b: 2'] & ['b: 1', 'b: 3', 'b: 2', 'cba: 1', 'a: 3', 'a: 4', 'a: 2', 'a: 3', 'a: 1', 'cab: 1', 'b: 2', 'b: 1', 'b: 2']\\
 1 2 5 4 2 1 2 1 3 2 & & &\\
 2 3 1 1 1 2 1 2 3 1 & & &\\
 \hline
 5  & 0.000146090 & 0.000058412 &  0.000457525\\
 1 2 3 4 5 & & 14 & 14\\
 7 6 5 4 3 & & ['a: 1', 'a: 2', 'a: 3', 'cab: 1', 'b: 4', 'b: 3']& ['a: 1', 'a: 2', 'a: 3', 'cab: 1', 'b: 4', 'b: 3']\\
 1 1 1 3 & & &\\
 4 2 1 3 & & &\\
 \hline
 
\end{tabular}
\newpage

 \centering
\begin{tabular}{ |p{5cm}||p{3cm}|p{3cm}|p{3cm}|  }

 \hline
 \multicolumn{4}{|c|}{Tests 2} \\
 \hline
 
 Entradas & P. voraz & P. dinamica & Agloritmo Ciego\\

 \hline
 4  & 0.000140726 & 0.000044107 &  0.000248670\\
 3 6 5 1 & & 13 & 13\\
 2 5 3 4 & & ['b: 2', 'b: 5', 'b: 3', 'cba: 2', 'a: 1'] & ['b: 2', 'b: 5', 'b: 3', 'cba: 2', 'a: 1']\\
 2 1 3 & & &\\
 1 1 2 & & &\\
 \hline
 5  & 0.000059843 & 0.000153243 &  0.000371217\\
 3 1 4 8 6 & & 18 & 18\\
 2 3 1 5 7 & & ['b: 2', 'cba: 1', 'a: 1', 'cab: 1', 'b: 1', 'b: 5', 'b: 7'] & ['b: 2', 'b: 3', 'b: 1', 'b: 5', 'b: 7']\\
 2 1 1 3 & & &\\
 1 2 1 4 & & &\\
 \hline
 3  & 0.000041723 & 0.0000999 &  0.000148534\\
 2 1 5 & & 8 & 8\\
 3 2 5 & & ['a: 2', 'a: 1', 'a: 5'] & ['a: 2', 'a: 1', 'a: 5']\\
 1 1 & & &\\
 1 2 & & &\\
 \hline
 7  & 0.000090837 & 0.000233411 &  0.001791954\\
 1 2 6 1 5 2 1 & & 8 & 8\\
 3 1 3 2 8 1 9 & & ['a: 1', 'cab: 1', 'b: 1', 'b: 3', 'cba: 1', 'a: 1', 'a: 5', 'a: 2', 'a: 1'] & ['a: 1', 'cab: 1', 'b: 1', 'b: 3', 'cba: 1', 'a: 1', 'a: 5', 'a: 2', 'a: 1']\\
 1 1 1 3 5 2 & & &\\
 4 2 1 3 2 1 & & &\\
 \hline
\end{tabular}
Se puede concluir de la tabla...
\newpage



\subsection{Conclusiones y aspectos para mejorar}






\end{document}
